------------------------------------------------------------------------------------------------------

¿Qué tenemos hecho?

------------------------------------------------------------------------------------------------------

PRÁCTICA 1: -> HECHO

Assignment statements

Comparison operators (==, <=,>=, !=)

Logical Operators (&&, ||, !)

Arithmetic operators (+, -, *, / and unary minus)

Variables and numerical constants

------------------------------------------------------------------------------------------------------

PRÁCTICA 2: -> HECHO

Put in the grammar the variables declaration rules (only int type)

Include the rules for accepting general functions from C language.

------------------------------------------------------------------------------------------------------

PRÁCTICA 3: -> HECHO

Adapt the grammar for processing global variables. Use a symbol table for this purpose.

Add the necessary rules for accepting printf functions from C language.

------------------------------------------------------------------------------------------------------

PRÁCTICA 4: -> HECHO

Add the necessary rules for accepting printf functions from C language.

Add the AST for arithmetic, logic and relational operators.

Add the necessary rules for accepting scanf functions from C language.

------------------------------------------------------------------------------------------------------

PRÁCTICA 5: -> HECHO

Add the necessary rules for accepting scanf functions from C language.

Adapt the grammar for accepting arrays, multidimensional matrix and pointers.

------------------------------------------------------------------------------------------------------

PRÁCTICA 6: -> HECHO

Adapt the grammar for accepting arrays, multidimensional matrix and pointers.

Include the rules for conditional sentences (if-else). Nested sentences can be used.

------------------------------------------------------------------------------------------------------

PRÁCTICA 7: -> GENERAR PRUEBA

Generate assembly code for variable declaration

Add the translation to assembler code of arithmetic operations. Use the AST for this purpose

Generate the associate assembler code for functions (printf and scanf are included).

------------------------------------------------------------------------------------------------------

PRÁCTICA 8:

Generate the associate assembler code for functions (printf and scanf are included).

Add assembly translation for vectors, matrix and pointers

Include the rules (only grammar) for while loops. Nested sentences can be used

------------------------------------------------------------------------------------------------------

PRÁCTICA 9:

Include the rules (only grammar) for while loops. Nested sentences can be used.

Add the translation to assembler code of logic and relational operations. Use the AST for this purpose.

Generate the associate assembler code for conditional sentences (if-else)

------------------------------------------------------------------------------------------------------

PRÁCTICA 10:

Generate the associate assembler code for conditional sentences (if-else)

Generate the associate assembler code for while loops.

Adapt the grammar for processing global variables. Use a symbol table for this purpose. Generate the associate assembler code for these variables.

------------------------------------------------------------------------------------------------------
